<?php declare(strict_types = 1);

namespace Everon\Logger\Configurator\Plugin;

use Everon\Logger\Configurator\AbstractPluginConfigurator;
use Everon\Logger\Plugin\Redis\RedisLoggerPlugin;
use InvalidArgumentException;
use UnexpectedValueException;
use function array_key_exists;
use function ctype_upper;
use function is_array;
use function is_object;
use function method_exists;
use function sprintf;
use function strtolower;
use function trim;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
class RedisLoggerPluginConfigurator extends AbstractPluginConfigurator
{
    protected array $data = [
        'pluginClass' => RedisLoggerPlugin::class,
        'pluginFactoryClass' => null,
        'logLevel' => 'debug',
        'shouldBubble' => true,
        'key' => null,
        'capSize' => 0,
        'redisConnection' => null,
    ];

    protected array $default = [
        'pluginClass' => RedisLoggerPlugin::class,
        'pluginFactoryClass' => null,
        'logLevel' => 'debug',
        'shouldBubble' => true,
        'key' => null,
        'capSize' => 0,
        'redisConnection' => null,
    ];

    protected array $propertyMapping = [
        'pluginClass' => 'string',
        'pluginFactoryClass' => 'string',
        'logLevel' => 'string',
        'shouldBubble' => 'bool',
        'key' => 'string',
        'capSize' => 'int',
        'redisConnection' => '\\Everon\\Logger\\Configurator\\Plugin\\RedisConnectionConfigurator',
    ];

    protected array $collectionItems = [
    ];

    protected array $updateMap = [];

    public function toArray(): array
    {
        $data = [];

        foreach ($this->propertyMapping as $key => $type) {
            if (!array_key_exists($key, $data)) {
                $data[$key] = $this->default[$key] ?? null;
            }
            $value = $this->data[$key];

            if ($this->isCollectionItem($key) && is_array($value)) {
                foreach ($value as $popo) {
                    if (is_object($popo) && method_exists($popo, 'toArray')) {
                        $data[$key][] = $popo->toArray();
                    }
                }

                continue;
            }

            if (is_object($value) && method_exists($value, 'toArray')) {
                $data[$key] = $value->toArray();
                continue;
            }

            $data[$key] = $value;
        }

        return $data;
    }

    protected function isCollectionItem(string $key): bool
    {
        return array_key_exists($key, $this->collectionItems);
    }

    public function fromArray(array $data): RedisLoggerPluginConfigurator
    {
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = $this->default[$key] ?? null;

            if ($this->typeIsObject($type)) {
                $popo = new $this->propertyMapping[$key];
                if (method_exists($popo, 'fromArray')) {
                    $popoData = $data[$key] ?? $this->default[$key] ?? [];
                    $popo->fromArray($popoData);
                }
                $result[$key] = $popo;

                continue;
            }

            if (array_key_exists($key, $data)) {
                if ($this->isCollectionItem($key)) {
                    foreach ($data[$key] as $popoData) {
                        $popo = new $this->collectionItems[$key]();
                        if (method_exists($popo, 'fromArray')) {
                            $popo->fromArray($popoData);
                        }
                        $result[$key][] = $popo;
                    }
                }
                else {
                    $result[$key] = $data[$key];
                }
            }
        }

        $this->data = $result;

        foreach ($data as $key => $value) {
            if (!array_key_exists($key, $result)) {
                continue;
            }

            $type = $this->propertyMapping[$key] ?? null;
            if ($type !== null) {
                $value = $this->typecastValue($type, $result[$key]);
                $this->popoSetValue($key, $value);
            }
        }

        return $this;
    }

    /**
     * @param string $type
     * @param mixed $value
     *
     * @return mixed
     */
    protected function typecastValue(string $type, $value)
    {
        if ($value === null) {
            return $value;
        }

        switch ($type) {
            case 'int':
                $value = (int) $value;
                break;
            case 'string':
                $value = (string) $value;
                break;
            case 'bool':
                $value = (bool) $value;
                break;
            case 'array':
                $value = (array) $value;
                break;
        }

        return $value;
    }

    public function isNew(): bool
    {
        return empty($this->updateMap);
    }

    /**
     * @return string|null
     */
    public function getPluginClass(): ?string
    {
        return $this->popoGetValue('pluginClass');
    }

    /**
     * @param string|null $pluginClass
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setPluginClass(?string $pluginClass): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('pluginClass', $pluginClass);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string
     * @throws \UnexpectedValueException
     *
     */
    public function requirePluginClass(): string
    {
        $this->assertPropertyValue('pluginClass');

        return (string) $this->popoGetValue('pluginClass');
    }

    /**
     * @param string $property
     *
     * @return void
     * @throws UnexpectedValueException
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new UnexpectedValueException(sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasPluginClass(): bool
    {
        return $this->updateMap['pluginClass'] ?? false;
    }

    /**
     * @return string|null Defines custom plugin factory to be used to create a plugin
     */
    public function getPluginFactoryClass(): ?string
    {
        return $this->popoGetValue('pluginFactoryClass');
    }

    /**
     * @param string|null $pluginFactoryClass Defines custom plugin factory to be used to create a plugin
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setPluginFactoryClass(?string $pluginFactoryClass): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('pluginFactoryClass', $pluginFactoryClass);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string Defines custom plugin factory to be used to create a plugin
     * @throws \UnexpectedValueException
     *
     */
    public function requirePluginFactoryClass(): string
    {
        $this->assertPropertyValue('pluginFactoryClass');

        return (string) $this->popoGetValue('pluginFactoryClass');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasPluginFactoryClass(): bool
    {
        return $this->updateMap['pluginFactoryClass'] ?? false;
    }

    /**
     * @return string|null The minimum logging level at which this handler will be triggered
     */
    public function getLogLevel(): ?string
    {
        return $this->popoGetValue('logLevel');
    }

    /**
     * @param string|null $logLevel The minimum logging level at which this handler will be triggered
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setLogLevel(?string $logLevel): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('logLevel', $logLevel);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string The minimum logging level at which this handler will be triggered
     * @throws \UnexpectedValueException
     *
     */
    public function requireLogLevel(): string
    {
        $this->assertPropertyValue('logLevel');

        return (string) $this->popoGetValue('logLevel');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasLogLevel(): bool
    {
        return $this->updateMap['logLevel'] ?? false;
    }

    /**
     * @return boolean|null Whether the messages that are handled can bubble up the stack or not
     */
    public function shouldBubble(): ?bool
    {
        return $this->popoGetValue('shouldBubble');
    }

    /**
     * @param boolean|null $shouldBubble Whether the messages that are handled can bubble up the stack or not
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setShouldBubble(?bool $shouldBubble): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('shouldBubble', $shouldBubble);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return boolean Whether the messages that are handled can bubble up the stack or not
     * @throws \UnexpectedValueException
     *
     */
    public function requireShouldBubble(): bool
    {
        $this->assertPropertyValue('shouldBubble');

        return (bool) $this->popoGetValue('shouldBubble');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasShouldBubble(): bool
    {
        return $this->updateMap['shouldBubble'] ?? false;
    }

    /**
     * @return string|null The key name to push records to
     */
    public function getKey(): ?string
    {
        return $this->popoGetValue('key');
    }

    /**
     * @param string|null $key The key name to push records to
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setKey(?string $key): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('key', $key);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string The key name to push records to
     * @throws \UnexpectedValueException
     *
     */
    public function requireKey(): string
    {
        $this->assertPropertyValue('key');

        return (string) $this->popoGetValue('key');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasKey(): bool
    {
        return $this->updateMap['key'] ?? false;
    }

    /**
     * @return integer|null Number of entries to limit list size to, 0 = unlimited
     */
    public function getCapSize(): ?int
    {
        return $this->popoGetValue('capSize');
    }

    /**
     * @param integer|null $capSize Number of entries to limit list size to, 0 = unlimited
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setCapSize(?int $capSize): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('capSize', $capSize);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return integer Number of entries to limit list size to, 0 = unlimited
     * @throws \UnexpectedValueException
     *
     */
    public function requireCapSize(): int
    {
        $this->assertPropertyValue('capSize');

        return (int) $this->popoGetValue('capSize');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasCapSize(): bool
    {
        return $this->updateMap['capSize'] ?? false;
    }

    /**
     * @return RedisConnectionConfigurator|null Redis connection related settings
     */
    public function getRedisConnection(): ?RedisConnectionConfigurator
    {
        return $this->popoGetValue('redisConnection');
    }

    /**
     * @param RedisConnectionConfigurator|null $redisConnection Redis connection related settings
     *
     * @return RedisLoggerPluginConfigurator
     */
    public function setRedisConnection(?RedisConnectionConfigurator $redisConnection): RedisLoggerPluginConfigurator
    {
        $this->popoSetValue('redisConnection', $redisConnection);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return RedisConnectionConfigurator Redis connection related settings
     * @throws \UnexpectedValueException
     *
     */
    public function requireRedisConnection(): RedisConnectionConfigurator
    {
        $this->assertPropertyValue('redisConnection');

        return $this->popoGetValue('redisConnection');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasRedisConnection(): bool
    {
        return $this->updateMap['redisConnection'] ?? false;
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @return void
     * @throws \InvalidArgumentException
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = trim(strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!is_array($collection) || $type !== 'array') {
            throw new InvalidArgumentException('Cannot add item to non array type: ' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            if ($this->typeIsObject($this->propertyMapping[$property])) {
                $popo = new $this->propertyMapping[$property];
                $this->data[$property] = $popo;
            }
            else {
                return null;
            }
        }

        return $this->data[$property];
    }

    protected function typeIsObject(string $value): bool
    {
        return $value[0] === '\\' && ctype_upper($value[1]);
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;

        $this->updateMap[$property] = true;
    }
}
