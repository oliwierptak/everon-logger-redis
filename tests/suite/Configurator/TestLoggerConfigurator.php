<?php declare(strict_types = 1);

namespace EveronLoggerTests\Suit\Configurator;

use InvalidArgumentException;
use UnexpectedValueException;
use function array_key_exists;
use function ctype_upper;
use function is_array;
use function is_object;
use function method_exists;
use function sprintf;
use function strtolower;
use function trim;

/**
 * Code generated by POPO generator, do not edit.
 * https://packagist.org/packages/popo/generator
 */
class TestLoggerConfigurator
{
    protected array $data = [
        'message' => null,
        'level' => null,
        'context' =>
            [
            ],
        'extra' =>
            [
            ],
        'delimiter' => '] everon-logger.',
    ];

    protected array $default = [
        'message' => null,
        'level' => null,
        'context' =>
            [
            ],
        'extra' =>
            [
            ],
        'delimiter' => '] everon-logger.',
    ];

    protected array $propertyMapping = [
        'message' => 'string',
        'level' => 'string',
        'context' => 'array',
        'extra' => 'array',
        'delimiter' => 'string',
    ];

    protected array $collectionItems = [
    ];

    protected array $updateMap = [];

    /**
     * @param string $property
     *
     * @return mixed|null
     */
    protected function popoGetValue(string $property)
    {
        if (!isset($this->data[$property])) {
            if ($this->typeIsObject($this->propertyMapping[$property])) {
                $popo = new $this->propertyMapping[$property];
                $this->data[$property] = $popo;
            }
            else {
                return null;
            }
        }

        return $this->data[$property];
    }

    /**
     * @param string $property
     * @param mixed $value
     *
     * @return void
     */
    protected function popoSetValue(string $property, $value): void
    {
        $this->data[$property] = $value;

        $this->updateMap[$property] = true;
    }

    /**
     * @param string $property
     *
     * @return void
     * @throws UnexpectedValueException
     */
    protected function assertPropertyValue(string $property): void
    {
        if (!isset($this->data[$property])) {
            throw new UnexpectedValueException(sprintf(
                'Required value of "%s" has not been set',
                $property
            ));
        }
    }

    /**
     * @param string $propertyName
     * @param mixed $value
     *
     * @return void
     * @throws \InvalidArgumentException
     */
    protected function addCollectionItem(string $propertyName, $value): void
    {
        $type = trim(strtolower($this->propertyMapping[$propertyName]));
        $collection = $this->popoGetValue($propertyName) ?? [];

        if (!is_array($collection) || $type !== 'array') {
            throw new InvalidArgumentException('Cannot add item to non array type: ' . $propertyName);
        }

        $collection[] = $value;

        $this->popoSetValue($propertyName, $collection);
    }

    public function toArray(): array
    {
        $data = [];

        foreach ($this->propertyMapping as $key => $type) {
            if (!array_key_exists($key, $data)) {
                $data[$key] = $this->default[$key] ?? null;
            }
            $value = $this->data[$key];

            if ($this->isCollectionItem($key) && is_array($value)) {
                foreach ($value as $popo) {
                    if (is_object($popo) && method_exists($popo, 'toArray')) {
                        $data[$key][] = $popo->toArray();
                    }
                }

                continue;
            }

            if (is_object($value) && method_exists($value, 'toArray')) {
                $data[$key] = $value->toArray();
                continue;
            }

            $data[$key] = $value;
        }

        return $data;
    }

    public function fromArray(array $data): TestLoggerConfigurator
    {
        foreach ($this->propertyMapping as $key => $type) {
            $result[$key] = $this->default[$key] ?? null;

            if ($this->typeIsObject($type)) {
                $popo = new $this->propertyMapping[$key];
                if (method_exists($popo, 'fromArray')) {
                    $popoData = $data[$key] ?? $this->default[$key] ?? [];
                    $popo->fromArray($popoData);
                }
                $result[$key] = $popo;

                continue;
            }

            if (array_key_exists($key, $data)) {
                if ($this->isCollectionItem($key)) {
                    foreach ($data[$key] as $popoData) {
                        $popo = new $this->collectionItems[$key]();
                        if (method_exists($popo, 'fromArray')) {
                            $popo->fromArray($popoData);
                        }
                        $result[$key][] = $popo;
                    }
                }
                else {
                    $result[$key] = $data[$key];
                }
            }
        }

        $this->data = $result;

        foreach ($data as $key => $value) {
            if (!array_key_exists($key, $result)) {
                continue;
            }

            $type = $this->propertyMapping[$key] ?? null;
            if ($type !== null) {
                $value = $this->typecastValue($type, $result[$key]);
                $this->popoSetValue($key, $value);
            }
        }

        return $this;
    }

    /**
     * @param string $type
     * @param mixed $value
     *
     * @return mixed
     */
    protected function typecastValue(string $type, $value)
    {
        if ($value === null) {
            return $value;
        }

        switch ($type) {
            case 'int':
                $value = (int) $value;
                break;
            case 'string':
                $value = (string) $value;
                break;
            case 'bool':
                $value = (bool) $value;
                break;
            case 'array':
                $value = (array) $value;
                break;
        }

        return $value;
    }

    protected function isCollectionItem(string $key): bool
    {
        return array_key_exists($key, $this->collectionItems);
    }

    protected function typeIsObject(string $value): bool
    {
        return $value[0] === '\\' && ctype_upper($value[1]);
    }

    /**
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->popoGetValue('message');
    }

    /**
     * @param string|null $message
     *
     * @return TestLoggerConfigurator
     */
    public function setMessage(?string $message): TestLoggerConfigurator
    {
        $this->popoSetValue('message', $message);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string
     * @throws \UnexpectedValueException
     *
     */
    public function requireMessage(): string
    {
        $this->assertPropertyValue('message');

        return (string) $this->popoGetValue('message');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasMessage(): bool
    {
        return $this->updateMap['message'] ?? false;
    }

    /**
     * @return string|null
     */
    public function getLevel(): ?string
    {
        return $this->popoGetValue('level');
    }

    /**
     * @param string|null $level
     *
     * @return TestLoggerConfigurator
     */
    public function setLevel(?string $level): TestLoggerConfigurator
    {
        $this->popoSetValue('level', $level);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string
     * @throws \UnexpectedValueException
     *
     */
    public function requireLevel(): string
    {
        $this->assertPropertyValue('level');

        return (string) $this->popoGetValue('level');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasLevel(): bool
    {
        return $this->updateMap['level'] ?? false;
    }

    /**
     * @return array|null
     */
    public function getContext(): ?array
    {
        return $this->popoGetValue('context');
    }

    /**
     * @param array|null $context
     *
     * @return TestLoggerConfigurator
     */
    public function setContext(?array $context): TestLoggerConfigurator
    {
        $this->popoSetValue('context', $context);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return array
     * @throws \UnexpectedValueException
     *
     */
    public function requireContext(): array
    {
        $this->assertPropertyValue('context');

        return (array) $this->popoGetValue('context');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasContext(): bool
    {
        return $this->updateMap['context'] ?? false;
    }

    /**
     * @return array|null
     */
    public function getExtra(): ?array
    {
        return $this->popoGetValue('extra');
    }

    /**
     * @param array|null $extra
     *
     * @return TestLoggerConfigurator
     */
    public function setExtra(?array $extra): TestLoggerConfigurator
    {
        $this->popoSetValue('extra', $extra);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return array
     * @throws \UnexpectedValueException
     *
     */
    public function requireExtra(): array
    {
        $this->assertPropertyValue('extra');

        return (array) $this->popoGetValue('extra');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasExtra(): bool
    {
        return $this->updateMap['extra'] ?? false;
    }

    /**
     * @return string|null
     */
    public function getDelimiter(): ?string
    {
        return $this->popoGetValue('delimiter');
    }

    /**
     * @param string|null $delimiter
     *
     * @return TestLoggerConfigurator
     */
    public function setDelimiter(?string $delimiter): TestLoggerConfigurator
    {
        $this->popoSetValue('delimiter', $delimiter);

        return $this;
    }

    /**
     * Throws exception if value is null.
     *
     * @return string
     * @throws \UnexpectedValueException
     *
     */
    public function requireDelimiter(): string
    {
        $this->assertPropertyValue('delimiter');

        return (string) $this->popoGetValue('delimiter');
    }

    /**
     * Returns true if value was set to any value, ignores defaults.
     *
     * @return bool
     */
    public function hasDelimiter(): bool
    {
        return $this->updateMap['delimiter'] ?? false;
    }

    /**
     * @param $item
     *
     * @return TestLoggerConfigurator
     */
    public function addContextItem($item): TestLoggerConfigurator
    {
        $this->addCollectionItem('context', $item);

        return $this;
    }

    /**
     * @param $item
     *
     * @return TestLoggerConfigurator
     */
    public function addExtraItem($item): TestLoggerConfigurator
    {
        $this->addCollectionItem('extra', $item);

        return $this;
    }
}
